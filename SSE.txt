#include <iostream>
#include <fstream>
#include <vector>
#include <math.h>
#include <time.h>
#include <string>
#include <string.h>
#include <sstream>
#include <algorithm>
#include <smmintrin.h>
#include <nmmintrin.h>
#include <xmmintrin.h>
#include <emmintrin.h>
#include <pmmintrin.h>
#include <tmmintrin.h>
#include <immintrin.h>
#define MAXSIZE 2000
using namespace std;
class Hash_List {
public:
	int beg = -1;
	int end = -1;
};

class index {
public:
    int len = 0;
	vector<unsigned int> arr;
};
bool operator<(const index& s1, const index& s2)
{
	return s1.len < s2.len; //从小到大排序
}
void sorted(int* list, vector<index>& idx,int num) {
	for (int i = 0; i < num-1; i++) {
		for (int j = 0; j < num - i - 1; j++) {
			if (idx[list[j]].len > idx[list[j + 1]].len) {
				int tmp = list[j];
				list[j] = list[j + 1];
				list[j + 1] = tmp;
			}
		}
	}
}
index s;
index temp;
index& SVS(int* list,vector<index> &idx,int num) {
	 s = idx[list[0]];
	for (int i = 1; i < num; i++) {//num个列表求交
		int count = 0;//s中的删除指针，找到元素，则+1，未找到则erase但由于数组前移，不用+1
		int length = s.len;
		for (int j = 0; j < length; j++) {//s列表中的各个值比较
			bool isExit = false;
			for (int t = 0; t < idx[list[i]].len; t++) {//第i个列表的各个值与s列表中的第【j]个值比较
				if (s.arr[count] == idx[list[i]].arr[t]) {
					isExit = true;
					break;
				}
			}
			if (isExit == false) {
				s.len--;
				s.arr.erase(s.arr.begin()+count);//删除第s中第j个元素
			}
			else {
				count++;
			}
		}
	}
	return s;
}
index& SVS_P_SSE(int* list, vector<index>& idx, int num) {
	s = idx[list[0]];
	for (int i = 1; i < num; i++) {//num个列表求交
		int count = 0;//s中的删除指针，找到元素，则+1，未找到则erase但由于数组前移，不用+1
		int length = s.len;
		for (int j = 0; j < length; j++) {//s列表中的各个值比较
			bool isExit = false;
			__m128i ss,result;
			ss = _mm_set1_epi32(s.arr[count]);
			unsigned int res[4] = { 0 };
			for (float t = 0; t < idx[list[i]].len; t+=4) {//将s中一个元素同时和list中4个数比较
				__m128i ii;
				ii = _mm_set_epi32(idx[list[i]].arr[t], idx[list[i]].arr[t + 1], idx[list[i]].arr[t + 2], idx[list[i]].arr[t + 3]);
				result = _mm_set1_epi32(0);
				result = _mm_sub_epi32(ss, ii);
				int res[4] = { 0 };
				_mm_storeu_si64(&res[0], result);
				_mm_storeu_si64(&res[2], result);
				for (int i = 0; i < 4; i++) {
					if (res[i] == 0) {
						isExit = true;
						break;
					}
				}
			}
			if (isExit == false) {
				s.len--;
				s.arr.erase(s.arr.begin() + count);//删除第s中第j个元素
			}
			else {
				count++;
			}
		}
	}
	return s;
}
index& SVS_P_AVX(int* list, vector<index>& idx, int num) {
	s = idx[list[0]];
	for (int i = 1; i < num; i++) {//num个列表求交
		int count = 0;//s中的删除指针，找到元素，则+1，未找到则erase但由于数组前移，不用+1
		int length = s.len;
		for (int j = 0; j < length; j++) {//s列表中的各个值比较
			bool isExit = false;
			__m256i ss, result;
			ss = _mm256_set1_epi32(s.arr[count]);
			unsigned int res[8] = { 0 };
			for (float t = 0; t < idx[list[i]].len; t += 8) {//将s中一个元素同时和list中4个数比较
				__m256i ii;
				ii = _mm256_set_epi32(idx[list[i]].arr[t], idx[list[i]].arr[t + 1], idx[list[i]].arr[t + 2], idx[list[i]].arr[t + 3], idx[list[i]].arr[t + 4], idx[list[i]].arr[t + 5], idx[list[i]].arr[t + 6], idx[list[i]].arr[t + 7]);
				result = _mm256_set1_epi32(0);
				result = _mm256_sub_epi32(ss, ii);
				int res[8] = { 0 };
				__m256i mask = _mm256_set_epi32(1, 1, 1, 1, 1, 1, 1, 1);
				_mm256_maskstore_epi32(res,mask, result);
				for (int i = 0; i < 8; i++) {
					if (res[i] == 0) {
						isExit = true;
						break;
					}
				}
			}
			if (isExit == false) {
				s.len--;
				s.arr.erase(s.arr.begin() + count);//删除第s中第j个元素
			}
			else {
				count++;
			}
		}
	}
	return s;
}
vector<unsigned int>& ADP_P_SSE(int* list, vector<index>& idx, int num)
{
	vector<unsigned int> S;
	int s = 1;
	bool found = true;
	vector<index> idx_;
	for (int i = 0; i < num; i++)
	{
		idx_.push_back(idx[list[i]]);
	}
	sort(idx_.begin(), idx_.end());
	/*for (int i = 0; i < num; i++)
	{
	 for (int j = 0; j < idx_[i].len; j++)
	 {
	  cout << idx_[i].arr[j] << " ";
	 }
	 cout << endl;
	}*/
	for (int t = 0; t < idx_[0].len; t++)
	{
		unsigned int e = idx_[0].arr[t];
		__m128i qwq;
		qwq = _mm_set1_epi32(e);
		while (s != num && found == true)
		{
			for (int i = 0; i < idx_[s].len; i+=4)
			{
				found = false;
				__m128i ewe, result;
				ewe = _mm_loadu_epi32(&idx_[s].arr[i]);
				result = _mm_set1_epi32(0);
				result = _mm_sub_epi32(ewe, qwq);
				int res[4] = { 0 };
				_mm_storeu_si64(&res[0], result);
				_mm_storeu_si64(&res[2], result);
				for (int i = 0; i < 4; i++) {
					if (res[i] == 0) {
						found = true;
						break;
					}
				}
			}
			s = s + 1;
		}
		if (s == num && found == true)
			S.push_back(e);
	}
	
	return S;
}
vector<unsigned int>& ADP_P_AVX(int* list, vector<index>& idx, int num)
{
	vector<unsigned int> S;
	int s = 1;
	bool found = true;
	vector<index> idx_;
	for (int i = 0; i < num; i++)
	{
		idx_.push_back(idx[list[i]]);
	}
	sort(idx_.begin(), idx_.end());
	/*for (int i = 0; i < num; i++)
	{
	 for (int j = 0; j < idx_[i].len; j++)
	 {
	  cout << idx_[i].arr[j] << " ";
	 }
	 cout << endl;
	}*/
	for (int t = 0; t < idx_[0].len; t++)
	{
		unsigned int e = idx_[0].arr[t];
		__m256i qwq;
		qwq = _mm256_set1_epi32(e);
		while (s != num && found == true)
		{
			for (int i = 0; i < idx_[s].len; i++)
			{
				found = false;
				__m256i ewe, result;
				ewe = _mm256_set_epi32(idx_[s].arr[i], idx_[s].arr[i + 1], idx_[s].arr[i + 2], idx_[s].arr[i + 3], idx_[s].arr[i + 4], idx_[s].arr[i + 5], idx_[s].arr[i + 6], idx_[s].arr[i + 7]);
				result = _mm256_set1_epi32(0);
				result = _mm256_sub_epi32(ewe, qwq);
				unsigned int res[8] = { 0 };
				_mm256_storeu_epi32(res, result);
				for (int i = 0; i < 8; i++) {
					if (res[i] == 0) {
						found = true;
						break;
					}
				}
			}
			s = s + 1;
		}
		if (s == num && found == true)
			S.push_back(e);
	}
	for (int i = 0; i < S.size(); i++)
		cout << S.at(i) << endl;
	return S;
}
vector<unsigned int>& ADP(int* list, vector<index>& idx, int num)
{
	vector<unsigned int> S;
	int s = 1;
	bool found = true;
	vector<index> idx_;
	for (int i = 0; i < num; i++)
	{
		idx_.push_back(idx[list[i]]);
	}
	for (int t = 0; t < idx_[0].len; t++)
	{
		unsigned int e = idx_[0].arr[t];
		while (s != num && found == true)
		{
			for (int i = 0; i < idx_[s].len; i++)
			{
				found = false;
				if (e == idx_[s].arr[i])
				{
					found = true;
					break;
				}
			}
			s = s + 1;
		}
		if (s == num && found == true)
			S.push_back(e);
	}
	return S;
}


void compare(int* list, vector<index>& idx, int num)
{
	vector<index> idx_;
	for (int i = 0; i < num; i++)
	{
		idx_.push_back(idx[list[i]]);
	}
	sort(idx_.begin(), idx_.end());
	vector<BitMap> bitmap;
	for (int i = 0; i < num; i++)
	{
		bitmap.push_back(30000000);
		for (int j = 0; j < idx_[i].len; j++)
		{
			bitmap[i].set(idx_[i].arr[j]);
		}
	}
	int count = 0;
	bool isExist = false;
	s_ = bitmap[0];
	for (int i = 1; i < num; i++)
	{
		for (int j = 0; j < bitmap[0].sec_index.size(); j++)
		{
			if ((s_.sec_index[j] ^ bitmap[i].sec_index[j]) == 0 && s_.sec_index[j] != 0)//按位异或
			{
				for (int t = j * 32; t < j * 32 + 32; t++)
				{
					if ((s_.fir_index[t] ^ bitmap[i].sec_index[t]) == 0 && s_.fir_index[t] != 0)
					{
						for (int l = t * 32; l < t * 32 + 32; l++)
							if ((s_.m_bits[l] ^ bitmap[i].m_bits[l]) == 0 && s_.m_bits[l] != 0)
								isExist = true;
					}
				}
			}
			if (isExist == false)
			{
				s_.sec_index[j] = 0;
			}
		}
	}
}
void compare_SSE(int* list, vector<index>& idx, int num)
{
	vector<index> idx_;
	for (int i = 0; i < num; i++)
	{
		idx_.push_back(idx[list[i]]);
	}
	sort(idx_.begin(), idx_.end());
	vector<BitMap> bitmap;
	for (int i = 0; i < num; i++)
	{
		bitmap.push_back(30000000);
		for (int j = 0; j < idx_[i].len; j++)
		{
			bitmap[i].set(idx_[i].arr[j]);
		}
	}
	int count = 0;
	bool isExist = false;
	s_ = bitmap[0];
	for (int i = 1; i < num; i++)
	{
		for (int j = 0; j < bitmap[0].sec_index.size(); j++)
		{
			if ((s_.sec_index[j] ^ bitmap[i].sec_index[j]) == 0 && s_.sec_index[j] != 0)//按位异或
			{
				for (int t = j * 32; t < j * 32 + 32; t+=4)
				{
					__m128i sf, bs, result;
					sf = _mm_set_epi32(s_.fir_index[t], s_.fir_index[t + 1], s_.fir_index[t + 2], s_.fir_index[t + 3]);
					bs = _mm_set_epi32(bitmap[i].sec_index[t], bitmap[i].sec_index[t + 1], bitmap[i].sec_index[t + 2], bitmap[i].sec_index[t + 3]);
					result = _mm_xor_epi32(sf, bs);
					int res[4];
					_mm_storeu_epi32(res,result);
					if ((s_.fir_index[t] ^ bitmap[i].sec_index[t]) == 0 && s_.fir_index[t] != 0)
					{
						for (int l = t * 32; l < t * 32 + 32; l++)
							if ((s_.m_bits[l] ^ bitmap[i].m_bits[l]) == 0 && s_.m_bits[l] != 0)
								isExist = true;
					}
				}
			}
			if (isExist == false)
			{
				s_.sec_index[j] = 0;
			}
		}
	}
}

int main() {
	//读取二进制文件
	fstream file;
	file.open("ExpIndex", ios::binary|ios::in);
	if (!file.is_open()) {
		cout << "No file";
		return 0;

	}
	vector<index> idx;
	for (int i=0; i <2000; i++) {
		index temp;
		file.read((char*)&temp.len, sizeof(temp.len));
		for (int j = 0; j < (temp.len); j++)
		{
			unsigned int binary_temp;
			file.read((char*)&binary_temp, sizeof(binary_temp));
			temp.arr.push_back(binary_temp);
		}
		idx.push_back(temp);
	}
	file.close();
	/*---------------------------------------------------------------------------------------------------------*/
	file.open("ExpQuery",  ios::in);
	int query[1000][5]={0};
	string line;
	int count = 0;
	while (getline(file, line)) {
		stringstream ss; //输入流
		ss << line; //向流中传值
		int a = 0;
		while (!ss.eof()) {
			int temp;
			ss >> temp;
			query[count][a] = temp;
			a++;
		}
		count++;
	}
	/*-----------------------------------------------------------------------------------------------------------*/

	//按表求交
	clock_t start, end;
	start = clock();
	for (int i = 0; i < 5; i++) {
		int num = 0;
		for (int j = 0; j < 5; j++) {
			if (query[i][j] != 0) {
				num++;
			}
		}
		int* list=new int[num];//例子中的数
		for (int j = 0; j < num; j++) {
			list[j] = query[i][j];
		}
		//------ - 按表求交-------- -
		sorted(list, idx, num);
		Zipper(list, idx, num);

	}
	end = clock();
	cout << "zipper消耗的事件：" << (end-start)/5 << endl;
	start = clock();
	
	/*HL = new Hash_List * [MAXSIZE];
	for(int i=0;i<MAXSIZE;i++){
	HL[i]=new Hash_List[65536];
	}
	HL = 预处理(idx, HL);
	start = clock();
	for (int i = 0; i < 1000; i++) {
		int num = 0;
		for (int j = 0; j < 5; j++) {
			if (query[i][j] != 0) {
				num++;
			}
		}
		int* list = new int[num];//例子中的数
		for (int j = 0; j < num; j++) {
			list[j] = query[i][j];
		}
		/*-------hash优化版---------
		
		sorted(list, idx, num);
		s = Hash_S(list, idx, num);

	}
	end = clock();
	cout << "哈希优化消耗的事件：" << start - end << endl;*/
	
//	
//	for (int i = 0; i < MAXSIZE; i++) {
//		HL[i] = new Hash_List[65536];
//	}
	//将列表按从小到大顺序排列
	//
/*	int num = sizeof(list) / sizeof(int);
	
	s = Hash_S(list,idx,num);
	cout << s.len << endl;*/
	/*for (int i = 0; i < s.len; i++) {
		cout << s.arr[i] << ' ';
	}*/
	return 0;
}