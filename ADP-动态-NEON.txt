#include <iostream>
#include <fstream>
#include <vector>
#include <math.h>
#include <time.h>
#include <string>
#include <string.h>
#include <sstream>
#include <algorithm>
#include <pthread.h>
#include <arm_neon.h>
#define MAXSIZE 2000
using namespace std;
using std::vector;
class _index {
public:
	int len = 0;
	vector<unsigned int> arr;
};
vector<_index> idx;

bool operator<(const _index& s1, const _index& s2)
{
	return s1.len < s2.len; //从小到大排序
}

pthread_t thread[4];

typedef struct {
	int t_id;//线程id
	int num_of_list;//待测的第几组list
	int e; //用于比较的数
	_index s0;
	bool isfound = false;
	bool have;
}threadParam_t;
threadParam_t param[4];

void* threadFunc_forADP(void* param) {
	threadParam_t* p = (threadParam_t*)param;
	if (p->have == true) {
		int t_id = p->t_id; //线程ID
		int num_of_list = p->num_of_list;  //待测列的编号
		bool found = p->isfound;

		unsigned int e = p->e;
		uint32x4_t e_ = vmovq_n_u32(e);
		uint32_t length = ceil(p->s0.len / 4) * 4;
		for (int m = p->s0.len; m < length; m++)
			p->s0.arr[m] = 0;


		for (int i = 0; i < length; i+=4)
		{
			found = false;
			unsigned int res[4] = { 0 };
			uint32x4_t temp1 = vld1q_u32(&p->s0.arr[i]);
			uint32x4_t result = vceqq_u32(e_, temp1);
			vst1q_u32(res, result);

			if (res[0] == 1 || res[1] == 1 || res[2] == 1 || res[3] == 1)
			{
				found = true;
				break;
			}
		}

		p->isfound = found;
	}
	return p;
}

vector<unsigned int> S;
vector<unsigned int>& ADP(int* list, vector<_index>& idx, int num)
{
	
	int s = 1;
	bool found = true;
	vector<_index> idx_;
	for (int i = 0; i < num; i++)
	{
		idx_.push_back(idx[list[i]]);
	}
	sort(idx_.begin(), idx_.end());

	for (int t = 0; t < idx_[0].len; t++)
	{
		s = 1;
		unsigned int e = idx_[0].arr[t];
		while (s < num && found == true)
		{


			for (int k = 0; k < 4; k++, s++) {
				if (s < num) {
					param[k].num_of_list = list[s]; //待测的第s组list
					param[k].t_id = k;
					param[k].e = e;
					param[k].s0 = idx_[s];
					param[k].isfound = found;
					param[k].have = true;
					pthread_create(&thread[k], NULL, threadFunc_forADP, &param[k]);
				}
				else param[k].have = false;
			}
			void* res;
			for (int k = 0; k < num - 1; k++) {
				pthread_join(thread[k], &res);
				param[k] = *(threadParam_t*)res;
			}
			for (int k = 0; k < 4; k++)
				if (param[k].isfound == false)
					found = false;

		}

		if (s >= num && found == true)
			S.push_back(e);
	}

	return S;
}









	
int main() {

	fstream file;
	file.open("ExpIndex", ios::binary | ios::in);
	if (!file.is_open()) {
		cout << "No file";
		return 0;

	}

	for (int i = 0; i < 2000; i++) {
		_index temp;
		file.read((char*)&temp.len, sizeof(temp.len));
		for (int j = 0; j < (temp.len); j++)
		{
			unsigned int binary_temp;
			file.read((char*)&binary_temp, sizeof(binary_temp));
			temp.arr.push_back(binary_temp);
		}
		idx.push_back(temp);
	}
	file.close();
	/*---------------------------------------------------------------------------------------------------------*/
	file.open("ExpQuery", ios::in);
	int query[1000][5] = { 0 };
	string line;
	int count = 0;
	while (getline(file, line)) {
		stringstream ss; //??????
		ss << line; //?????д??
		int a = 0;
		while (!ss.eof()) {
			int temp;
			ss >> temp;
			query[count][a] = temp;
			a++;
		}
		count++;
	}
	/*-----------------------------------------------------------------------------------------------------------*/

	//SVS

	struct timespec sts, ets;
	timespec_get(&sts, TIME_UTC);
	for (int i = 0; i < 1000; i++) {
		int num = 0;
		for (int j = 0; j < 5; j++) {
			if (query[i][j] != 0) {
				num++;
			}
		}
		int* list = new int[num];
		for (int j = 0; j < num; j++) {
			list[j] = query[i][j];
		}

		ADP(list, idx, num);

	}
	timespec_get(&ets, TIME_UTC);
	time_t dsec = ets.tv_sec-sts.tv_sec;
	long dnsec = ets.tv_nsec-sts.tv_nsec;
  if(dnsec<0){
  dsec--;
  dnsec+=1000000000ll;
  }
	printf(" % llu. % 09llus\n", dsec, dnsec);

	return 0;
}
